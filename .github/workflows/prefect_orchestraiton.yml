name: Deploy Prefect Flow to Cloud Run

on:
  push:
    branches: ["**"] # Trigger on push to main (adjust as needed)

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      # Authenticate to Google Cloud using the service account JSON key
      - name: Set up gcloud CLI
        uses: google-github-actions/setup-gcloud@v1
        with:
          service_account_key: ${{ secrets.GCP_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          export_default_credentials: true

      - name: Configure Docker auth for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev -q
        # The above command logs Docker into Artifact Registry&#8203;:contentReference[oaicite:10]{index=10}
        # using the gcloud credentials (no interactive prompt due to -q).

      - name: Build Docker image
        run: |
          cd prfectWorkflows
          IMAGE_URI="${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/backend-nubot/prefect-scraper:latest"
          echo "Building image $IMAGE_URI"
          docker build -t "$IMAGE_URI" -f  .
          # Note: The context is the repository root (.), adjust path to Dockerfile if needed.

      - name: Push Docker image to Artifact Registry
        run: |
          IMAGE_URI="${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/backend-nubot/prefect-scraper:latest"
          docker push "$IMAGE_URI"
        # After this step, the image is available in Artifact Registry for Cloud Run to use.

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install Prefect
        run: pip install prefect==3.1.10

      - name: Authenticate with Prefect Cloud
        env:
          PREFECT_API_KEY: ${{ secrets.PREFECT_API_KEY }}
        run: |
          # Use Prefect CLI to log in to Prefect Cloud non-interactively
          prefect cloud login -k $PREFECT_API_KEY -w "${{ secrets.PREFECT_WORKSPACE }}" || {
            # Fallback: manually set API URL and API Key if the above doesn't work
            echo "Using manual Prefect Cloud authentication..."
            prefect config set PREFECT_API_URL="https://api.prefect.cloud/api/accounts/${{ secrets.PREFECT_ACCOUNT_ID }}/workspaces/${{ secrets.PREFECT_WORKSPACE_ID }}"
            prefect config set PREFECT_API_KEY="${{ secrets.PREFECT_API_KEY }}"
          }
        # This step authenticates the CLI with Prefect Cloud.
        # We first attempt `prefect cloud login` (with API key and workspace) for convenience.
        # If that fails (for example, if workspace name flag is not supported non-interactively),
        # we fall back to setting PREFECT_API_URL and PREFECT_API_KEY directly&#8203;:contentReference[oaicite:11]{index=11}.
        # The PREFECT_API_URL uses your Account ID and Workspace ID (from secrets)
        # to target the correct workspace. This avoids "401 Unauthorized" due to wrong API URL.

      - name: Deploy Prefect flow
        run: |
          cd prefectWorkflows   # navigate to the folder containing prefect.yaml
          prefect deploy -n scraperflow-deployment
        # The -n flag ensures we deploy the specific deployment by name (optional if only one deployment in YAML).
        # This command reads prefect.yaml and registers/updates the deployment in Prefect Cloud.
