name: "gcp_connection"

on:
  push:
    branches:
      - "**"

jobs:
  gcp_connection:
    runs-on: ubuntu-latest
    env:
      PIP_CACHE_DIR: ~/.cache/pip
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Clone Repo Success
        run: echo "Cloned repo successfully"

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache Dependencies
        uses: actions/cache@v4
        with:
          path: ${{env.PIP_CACHE_DIR}}
          key: ${{runner.os}}-pip-${{github.workflow}}-${{hashFiles('pyproject.toml')}}
          restore-keys: |
            ${{runner.os}}-pip-

      - name: Install dependencies
        run: |
          pip install --upgrade pip
          pip install .

      - name: Success Message
        if: success()
        run: echo "Pipeline ran successfully"

      - name: Error Message
        if: failure()
        run: echo "Error during pipeline"

      - name: GCP Authentication
        uses: google-github-actions/auth@v2
        with:
          credentials_json: "${{secrets.GCP_KEY}}"

      - name: Setup gcloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Docker login for Artifact Registry
        run: |
          gcloud auth configure-docker ${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev

      # Build & Push Backend Image
      - name: Build and Push Backend Image
        run: |
          cd services/backend
          IMAGE=${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/nubot-docker/backend-service:latest
          docker build -t $IMAGE .
          docker push $IMAGE
          cd ../..

      # Build & Push Frontend Image
      - name: Build and Push Frontend Image
        run: |
          cd services/frontend
          IMAGE=${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/nubot-docker/frontend-service:latest
          docker build -t $IMAGE .
          docker push $IMAGE
          cd ../..

      # Pull & Push MLflow Official Image
      - name: Push MLflow Image
        run: |
          IMAGE=${{ secrets.GCP_ARTIFACT_REGISTRY_REGION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/nubot-docker/mlflow-service:latest
          docker pull ghcr.io/mlflow/mlflow:latest
          docker tag ghcr.io/mlflow/mlflow:latest $IMAGE
          docker push $IMAGE

      - name: Success Message for cloud
        if: success()
        run: echo "Connection and image push done successfully"

      - name: Failure Message for cloud
        if: failure()
        run: echo "Connection to gcloud or Docker image push failed"
